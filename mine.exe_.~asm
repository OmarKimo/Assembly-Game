include standrd.INC
include Team13Macro.INC
.MODEL LARGE
.STACK 64
.DATA
WelcomeString db '  ',10,13
db ' ',10,13
db ' ',10,13
db ' ',10,13
db '                ====================================================',10,13
db '               ||              *    PAC-DUEL Game    *             ||',10,13
db '               ||                      Control:                    ||',10,13
db '               ||    Use up, down, left, and right keys to change  ||',10,13
db '               ||    the direction of the player and space button  ||',10,13
db '               ||                  to shoot laser                  ||',10,13
db '               ||                   How to play:                   ||',10,13
db '               ||    there are 3 map,each map has points try to    ||',10,13
db '               ||    collect points more than the another player   ||',10,13
db '               ||    when the 2 players clash the player with the  ||',10,13
db '               ||    highst score at that moment will win at round ||',10,13
db '               ||    But be aware there are trapes with grey color ||',10,13
db '               ||    when you go throw it you can not return       ||',10,13
db '               ||    there are ammo you need to collect it for     ||',10,13
db '               ||    shoot the laser, it will go as horizontel     ||',10,13
db '               ||    &vertical line ,if it hit the another palyer  ||',10,13
db '               ||         it will decrease his points by 5         ||',10,13
db '               ||    at the end the player who win 2 maps or more  ||',10,13
db '               ||                 will be the winner               ||',10,13
db '               ||           Press any key to start the game        ||',10,13
db '                ====================================================',10,13
db '$'

menu db '  ',10,13
db ' ',10,13
db ' ',10,13
db ' ',10,13
db '                ====================================================',10,13
db '               ||                                                  ||',10,13
db '               ||                                                  ||',10,13
db '               ||              *    PAC-DUEL Game    *             ||',10,13
db '               ||--------------------------------------------------||',10,13
db '               ||                                                  ||',10,13
db '               ||                for start game press G            ||',10,13
db '               ||                for start chat press C            ||',10,13
db '               ||             for end the program press ESC        ||',10,13
db '               ||                                                  ||',10,13
db '               ||                                                  ||',10,13
db '               ||                                                  ||',10,13
db '               ||                                                  ||',10,13
db '               ||                                                  ||',10,13
db '               ||                                                  ||',10,13
db '               ||                                                  ||',10,13
db '               ||                                                  ||',10,13
db '               ||                                                  ||',10,13
db '               ||                                                  ||',10,13
db '               ||                                                  ||',10,13
db '                ====================================================',10,13
db '$'


;const for the game
limitX dw 320      ;The rightmost pixel can be reached
limitY dw 131      ;The downmost pixel can be reached
PlayerLength dw 7  ;The side length of the player ,note if change go to checkdown
LaserColor db 11   ;The color of Laser
Player1Color db 9  ;The color of Player 1
Player2Color db 12 ;The color of Player 2
WallColor db 4     ;The color of Wall
BonusColor db 13   ;The color of Bonus
BombColor db 14    ;The color of Bombs
trapColor db 7     ;The color of to-Wall Converter
;ASCII of the game
RightDirButton db 4dh  ;ASCII of right direction button for player
LeftDirButton db  4bh  ;ASCII of left direction button for player
UpDirButton db    48h  ;ASCII of up direction button for player
DownDirButton db  50h  ;ASCII of down direction button for player
ShootButton1 db 20h     ;ASCII of shoot button for player
StartButton db 13       ;ASCII of the button which start the game
EndButton db 27          ;ASCII of the button which end the game
;logic & info for the game
Player1x DD 0  ;X coordinate of player 1
Player1y DD 0  ;Y coordinate of player 1
Player2x DD 0  ;X coordinate of player 2
Player2y DD 0  ;Y coordinate of player 2
Player1xx DD 0 ;temp X coordinate of player 1
Player1yy DD 0 ;temp Y coordinate of player 1
Player2xx DD 0 ;temp X coordinate of player 2
Player2yy DD 0 ;temp Y coordinate of player 2
dirc1 DB 0     ;0:up / 1:down / 2:right /3:left for player 1
dirc2 DB 0     ;0:up / 1:down / 2:right /3:left for player 2
score1 DW 0    ;Score of player 1
score2 DW 0    ;Score of player 2
bombs1 Db 0    ;ammo of player 1
bombs2 Db 0    ;ammo of player 2
; name of the two player
name2        db  20        ;MAX NUMBER OF CHARACTERS ALLOWED (20).
db  ?         ;NUMBER OF CHARACTERS ENTERED BY USER.
db  20 dup(36) ;CHARACTERS ENTERED BY USER.

name1        db  20        ;MAX NUMBER OF CHARACTERS ALLOWED (20).
db  ?         ;NUMBER OF CHARACTERS ENTERED BY USER.
db  20 dup(36) ;CHARACTERS ENTERED BY USER.
;flags
endflag  db 0
flag1    db 0       ;To check if player 1 is shot.
flag2    db 0       ;To check if player 2 is shot.
nodelete db 0       ;Flag to if the laser is shot or not.
play1    db 1       ;Flag to Player 1
play2    db 2       ;Flag to Player 2
Collisionflag Db 0 ;if the player already Collision
myflag   db 0        ;who is the player1
stateflag db 0     ;0,1,2,3= dirc || 4= laser shot|| 5= endgame, 6 start chat
;output
Endl db 10,13,'$'  ;End line
req1 db 'enter Username: ','$'
playerstatment db 'Player$'
winner db 'is the winner',10,13,'$'
loser db 'is the loser',10,13,'$'
space db ' $'
dash db '-$'
score db 'Score:' , '$'
ammo db 'Ammo:' , '$'
msgret db 'for return to menu press Esc $'

loc1 db 0,0
loc2 db 0,0
;map
win1 db 0         ;number of games that player1 win
win2 db 0         ;number of games that player2 win
mapn db 0         ;flag descr what is the curr map
delay DD   0FFFFh ;speed -> change for each map
;for erase star
erasex dd 0
erasey dd 0
SENDDATA DB 0
;RECDATA DB 0

VALUE       DB      0
LETTER      DB      0
X1          DB      0
Y1          DB      0
X2          DB      0
Y2          DB      13
;-------------------------------------------------------------------------------------------------
.code
MAIN    PROC FAR
MOV AX,@DATA
MOV DS,AX
;intial for program

Configure
intialname

JMP chatmode

retu:
TEXTMODE
displaystring menu
Again1:   ;read char & decide what mode
mov ah,0
int 16h
cmp al,67
je chatmode
cmp al,71
je gamemode
cmp al,EndButton
je EndApp

jmp Again1

chatmode:
SplitScreen
;DISPLAY FIR NAME.
MoveCursor 0,0
mov ah, 9 ;SERVICE TO DISPLAY STRING.
mov dx, offset name1 + 2 ;MUST END WITH '$'.
int 21h
;DISPLAY SEC NAME
MoveCursor 0,13
mov ah, 9 ;SERVICE TO DISPLAY STRING.
mov dx, offset name2 + 2 ;MUST END WITH '$'.
int 21h
dispstring  msgret,0,23
mov X1,0
mov Y1,1
mov X2,0
mov Y2,14
MoveCursor X1, Y1


chatlop:

GetKey
CMP LETTER,27
Je retu

CMP LETTER, 0
JZ RECEIVE_LETTER

;SEND_LETTER
PrintChar LETTER, X1, Y1
SaveCursor X1, Y1
Send LETTER

RECEIVE_LETTER:
Receive
CMP VALUE, 0
JZ chatlop
MoveCursor X2, Y2
PrintChar VALUE, X2, Y2
SaveCursor X2, Y2

jmp chatlop


gamemode:
;intial for game
displaystring WelcomeString
mov ah,0
int 16H
;MOV LETTER,1
;Send LETTER
LOP1001:
;Receive
;CMP VALUE, 0
;JZ LOP1001
videomode
mov mapn,0
mov win1,0
mov win2,0
mov x1,0
mov x2,0
;---------------Game Start-------------------
mainmap:
mov al,mapn
sub al,win1
mov win2,AL
;drawmap
dispstring  msgret,0,23
disp2number win1,15,18
dispstring dash,17,18
disp2number win2,18,18

lopm1:

;input
mov ah,1
int 16h
jz noinpu  ; no input
;else there are input , take it and clear buffer
push ax
mov ah,0
int 16h
pop ax
caldirc
jmp skip1
;if no input then just send the dirction
noinpu: mov al,dirc1
cmp al,2
je myri
cmp dirc1,3
je myle
mov SENDDATA,al
jmp skip1
myri:   mov SENDDATA,3
jmp skip1
myle:   mov SENDDATA,2
jmp skip1

skip1:
;caldirc2 ;send & recive  info to another player
;make delay

mov ax,0
lopbuf1:
inc ax
cmp ax,delay
jne lopbuf1

mov  al,endflag
cmp al,1
je retu
MovePlayer ;calculate new postion for players
; check for Collision
mov  al,Collisionflag
cmp al,1
je endmap

statusbar ; update statusbar
jmp lopm1

endmap:
mov AX,score1
cmp AX,score2   ;win for player2
jl incrmap       ;change map
cmp AX,score2   ;win for player1
jG incr1         ;incr res for player 1
jmp mainmap ; points equal , play again

incr1:
inc win1
;then change map
incrmap:
inc mapn ; change map (0,1,2)
mov al,mapn
cmp al,2   ; if we already finished last map then al must =3
jg endgame  ; then end game
jmp mainmap  ; else there are more map map for play
;---------------------------------end of game -------------------------------
endgame:
ClearScreen
;Determine the winner
cmp win1,2
jae Player1Win ; condtion for player 1 to win
;else player 2 will win
Player2Win:

mov si, offset name2 + 1 ;NUMBER OF CHARACTERS ENTERED.
mov cl, [ si ] ;MOVE LENGTH TO CL.
mov ch, 0      ;CLEAR CH TO USE CX.
inc cx ;TO REACH CHR(13).
add si, cx ;NOW SI POINTS TO CHR(13).
mov al, '$'
mov [ si ], al ;REPLACE CHR(13) BY '$'.
movecursor 0,0
;DISPLAY STRING.
mov ah, 9 ;SERVICE TO DISPLAY STRING.
mov dx, offset name2 + 2 ;MUST END WITH '$'.
int 21h




dispstring winner,0,1



mov si, offset name1 + 1 ;NUMBER OF CHARACTERS ENTERED.
mov cl, [ si ] ;MOVE LENGTH TO CL.
mov ch, 0      ;CLEAR CH TO USE CX.
inc cx ;TO REACH CHR(13).
add si, cx ;NOW SI POINTS TO CHR(13).
mov al, '$'
mov [ si ], al ;REPLACE CHR(13) BY '$'.
movecursor 0,2
;DISPLAY STRING.
mov ah, 9 ;SERVICE TO DISPLAY STRING.
mov dx, offset name1 + 2 ;MUST END WITH '$'.
int 21h

dispstring loser,0,3

jmp Player2Win


Player1Win:
mov si, offset name1 + 1 ;NUMBER OF CHARACTERS ENTERED.
mov cl, [ si ] ;MOVE LENGTH TO CL.
mov ch, 0      ;CLEAR CH TO USE CX.
inc cx ;TO REACH CHR(13).
add si, cx ;NOW SI POINTS TO CHR(13).
mov al, '$'
mov [ si ], al ;REPLACE CHR(13) BY '$'.
movecursor 0,0
;DISPLAY STRING.
mov ah, 9 ;SERVICE TO DISPLAY STRING.
mov dx, offset name1 + 2 ;MUST END WITH '$'.
int 21h

dispstring winner,0,1

mov si, offset name2 + 1 ;NUMBER OF CHARACTERS ENTERED.
mov cl, [ si ] ;MOVE LENGTH TO CL.
mov ch, 0      ;CLEAR CH TO USE CX.
inc cx ;TO REACH CHR(13).
add si, cx ;NOW SI POINTS TO CHR(13).
mov al, '$'
mov [ si ], al ;REPLACE CHR(13) BY '$'.
movecursor 0,2
;DISPLAY STRING.
mov ah, 9 ;SERVICE TO DISPLAY STRING.
mov dx, offset name2 + 2 ;MUST END WITH '$'.
int 21h

dispstring loser,0,3

jmp Player1Win



EndApp:

;int that end program



HLT
MAIN    ENDP
END  MAIN



; [SOURCE]: C:\Users\Yahia\Desktop\micro\mine.asm
